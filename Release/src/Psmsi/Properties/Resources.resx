<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SnapIn_Description" xml:space="preserve">
    <value>Windows Installer PowerShell Extensions</value>
  </data>
  <data name="SnapIn_Vendor" xml:space="preserve">
    <value>Microsoft Corporation</value>
  </data>
  <data name="Argument_InvalidContextAndSid" xml:space="preserve">
    <value>Invalid combination of user SID and install context.</value>
  </data>
  <data name="Argument_InvalidSource" xml:space="preserve">
    <value>Invalid source format.</value>
  </data>
  <data name="Argument_InvalidSourceType" xml:space="preserve">
    <value>Invalid source type.</value>
  </data>
  <data name="Argument_InvalidProductState" xml:space="preserve">
    <value>Invalid product state.</value>
  </data>
  <data name="Context_Everyone" xml:space="preserve">
    <value>Specify to search all users.</value>
    <comment>GetPatchCommand; GetProductCommand; GetSourceCommand</comment>
  </data>
  <data name="GetPatch_Filter" xml:space="preserve">
    <value>Patch state filter to limit the search.</value>
    <comment>GetPatchCommand</comment>
  </data>
  <data name="Context_InstallContext" xml:space="preserve">
    <value>Install context to limit the search.</value>
    <comment>GetPatchCommand; GetProductCommand; GetSourceCommand</comment>
  </data>
  <data name="GetPatch_PatchCode" xml:space="preserve">
    <value>Patch codes for which information is retrieved.</value>
    <comment>GetPatchCommand</comment>
  </data>
  <data name="GetPatch_ProductCode" xml:space="preserve">
    <value>Product codes for which patches are enumerated.</value>
    <comment>GetPatchCommand</comment>
  </data>
  <data name="Context_UserSid" xml:space="preserve">
    <value>User SID to limit the search.</value>
    <comment>GetPatchCommand; GetProductCommand; GetSourceCommand</comment>
  </data>
  <data name="GetProduct_ProductCode" xml:space="preserve">
    <value>Product codes for which information is retrieved.</value>
    <comment>GetProductCommand</comment>
  </data>
  <data name="GetSource_InputObject" xml:space="preserve">
    <value>Product or patch information object from the pipeline.</value>
    <comment>GetSourceCommand</comment>
  </data>
  <data name="GetSource_PatchCode" xml:space="preserve">
    <value>Patch codes for which source list information is retrieved.</value>
    <comment>GetSourceCommand</comment>
  </data>
  <data name="GetSource_ProductCode" xml:space="preserve">
    <value>Product codes for which source list information is retrieved.</value>
    <comment>GetSourceCommand</comment>
  </data>
  <data name="GetRelatedProduct_UpgradeCode" xml:space="preserve">
    <value>Upgrade codes for which related products are enumerated.</value>
    <comment>GetRelatedProductCommand</comment>
  </data>
  <data name="GetSource_SourceType" xml:space="preserve">
    <value>Source type to limit the search.</value>
    <comment>GetSourceCommand</comment>
  </data>
  <data name="MsiRequiredVersion" xml:space="preserve">
    <value>Windows Installer {0}.{1} is required to execute this command.</value>
  </data>
  <data name="Location_Path" xml:space="preserve">
    <value>Specifies the path to an item. Wildcards are permitted.</value>
    <comment>GetFileHashCommand; GetFileTypeCommand</comment>
  </data>
  <data name="File_NotStorage" xml:space="preserve">
    <value>The file "{0}" is not a structure storage file.</value>
  </data>
  <data name="Location_LiteralPath" xml:space="preserve">
    <value>Specifies the path to an item. Wildcards are not permitted.</value>
    <comment>GetFileHashCommand; GetFileTypeCommand</comment>
  </data>
  <data name="File_AlreadyExists" xml:space="preserve">
    <value>The file "{0}" already exists.</value>
  </data>
  <data name="Error_AccessDenied" xml:space="preserve">
    <value>Access denied.</value>
  </data>
  <data name="Error_BadPatchConfiguration" xml:space="preserve">
    <value>The configuration data for patch {0} is corrupt.</value>
  </data>
  <data name="Error_BadProductConfiguration" xml:space="preserve">
    <value>The configuration data for product {0} is corrupt.</value>
  </data>
  <data name="Recommend_Recache" xml:space="preserve">
    <value>Reinstall the product with REINSTALLMODE=vomus.</value>
  </data>
  <data name="Recommend_RunElevated" xml:space="preserve">
    <value>Run the expression again in an elevated process.</value>
  </data>
</root>